datasource db {
  provider             = "mysql"
  referentialIntegrity = "prisma"
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  url                  = env("DATABASE_URL")
}

generator client {
  previewFeatures = ["dataProxy", "referentialIntegrity"]
  provider        = "prisma-client-js"
}

model Movie {
  id          Int        @id @default(autoincrement())
  movieItemId Int
  title       String?    @db.VarChar(99)
  image       String?    @db.VarChar(99)
  approved    Boolean    @default(false)
  added       DateTime   @default(now())
  addedBy     String
  updated     DateTime   @default(now()) @updatedAt
  updatedBy   String
  deleted     DateTime?
  deletedBy   String?
  movieItem   MovieItem? @relation(fields: [movieItemId], references: [id], onDelete: Cascade, map: "fk_movieItemId")

  @@index([movieItemId], map: "idx_movieItemId")
  @@index([title], map: "idx_title")
  @@index([image], map: "idx_image")
  @@map("Movies")
}

model MovieItem {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(99)
  releaseDate DateTime?    @db.Date
  image       String       @db.VarChar(99)
  approved    Boolean      @default(false)
  added       DateTime     @default(now())
  addedBy     String
  updated     DateTime     @default(now()) @updatedAt
  updatedBy   String
  deleted     DateTime?
  deletedBy   String?
  movies      Movie[]
  myMovieItem MyMovieItem?

  @@index([releaseDate], map: "idx_releaseDate")
  @@index([name], map: "idx_name")
  @@map("MovieItems")
}

model MyMovieItem {
  id          Int         @id @default(autoincrement())
  movieItemId Int         @unique
  userId      String
  ordered     Int?        @unique(map: "uk_ordered")
  caseType    CaseType    @default(Plain)
  digitalType DigitalType @default(None)
  has3D       YesNo       @default(N)
  wasWatched  YesNo       @default(N)
  formatType  FormatType
  status      ItemStatus
  notes       String?     @db.Text
  added       DateTime    @default(now())
  addedBy     String
  updated     DateTime    @default(now()) @updatedAt
  updatedBy   String
  deleted     DateTime?
  deletedBy   String?
  movieItem   MovieItem?  @relation(fields: [movieItemId], references: [id], onDelete: Cascade, map: "fk_myMovieItemId")
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([has3D], map: "idx_has3D")
  @@index([caseType], map: "idx_caseType")
  @@index([digitalType], map: "idx_digitalType")
  @@index([formatType], map: "idx_formatType")
  @@index([status], map: "idx_status")
  @@index([wasWatched], map: "idx_wasWatched")
  @@map("MyMovieItems")
}

enum CaseType {
  Box
  Digibook
  None
  Plain
  Slipcover
  Steelbook
}

enum DigitalType {
  None
  DC
  DC_UV           @map("DC+UV")
  UV
  Vudu
  MoviesAnywhere
}

enum YesNo {
  Y
  N
}

enum FormatType {
  Blu_ray   @map("Blu-ray")
  DVD
  Ultra_HD  @map("Ultra HD")
  UV
  Digital
}

enum ItemStatus {
  Owned
  Wanted
  Selling
  Waiting
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Sessions")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  added         DateTime      @default(now())
  addedBy       String
  updated       DateTime      @default(now()) @updatedAt
  updatedBy     String
  deleted       DateTime?
  deletedBy     String?
  accounts      Account[]
  sessions      Session[]
  myMovieItems  MyMovieItem[]

  @@map("Users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("VerificationTokens")
}
